package net.kraschitzer.roco.examples.consumers.awt.gui.extended;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.ImageObserver;

public class ImagePanel extends javax.swing.JPanel {

    private Image image;
    private Image backup;
    ImageObserver observer;

    /**
     * Creates new form ImagePanel
     */
    public ImagePanel() {
        initComponents();
        observer = new ImageObserver() {
                @Override
                public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
                    boolean fullyLoaded = (infoflags & ImageObserver.ALLBITS)>0;
                    if (fullyLoaded) {
                        repaint();
                        backup = img;
                    }
                    return !fullyLoaded;
                }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setImage(byte[] data) {
        image = Toolkit.getDefaultToolkit().createImage(data);
        if(this.image.getWidth(observer)!=-1){
            repaint();
        }
    }
    

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        try {
            if (image != null) {
                
                boolean done = g.drawImage(image, 0, 0, observer);     
                if(!done && backup!=null){
                    g.drawImage(backup, 0, 0, null);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

